include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Dependency-Scanning.gitlab-ci.yml
  - template: Jobs/Secret-Detection.gitlab-ci.yml
  - template: Jobs/SAST-IaC.gitlab-ci.yml
  - template: Jobs/Container-Scanning.gitlab-ci.yml
  - template: Code-Quality.gitlab-ci.yml


stages:
  - build
  - test
  - package
  - build_container
  - deploy

variables:
  # Define default variables; these can be overridden in the GitLab CI/CD settings if needed.
  IMAGE_PREFIX: "petclinic"
  CODE_QUALITY_DISABLED: 0
  # Assuming Docker and Maven are available in the runner. If not, you might need a custom Docker image.

# container_scanning:
#   variables:
#     CS_DEFAULT_BRANCH_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
#   before_script:
#     - export CS_IMAGE="$CI_REGISTRY_IMAGE/$CI_COMMIT_BRANCH:$CI_COMMIT_SHA"
#     - |
#       if [ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]; then
#         export CS_IMAGE="$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA"
#       fi

build_app:
  stage: build
  image: maven:3.8.4-openjdk-17
  script:
    - mvn compile
  artifacts:
    paths:
      - target/
    expire_in: 1 hour

test_app:
  stage: test
  image: maven:3.8.4-openjdk-17
  script:
    - mvn test
  artifacts:
    reports:
      junit: target/surefire-reports/*.xml
    expire_in: 1 hour

package_app:
  stage: package
  image: maven:3.8.4-openjdk-17
  script:
    - mvn package
  artifacts:
    paths:
      - target/*.jar
    expire_in: 1 hour

builddeploy_container:
  stage: deploy
  image: docker:latest
  needs:
    - job: package_app
      artifacts: true
  services:
    - docker:dind
  before_script:
    - export CS_IMAGE="$CI_REGISTRY_IMAGE/$CI_COMMIT_BRANCH:$CI_COMMIT_SHA"
    - |
      if [ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]; then
        export CS_IMAGE="$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA"
      fi

  script:
    - echo "Deploy stage could include deployment to a specific environment, pushing Docker images, etc."
    - |
      # Login to Docker Registry
      docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

      docker build -t $CS_IMAGE .
  
      # Push Docker image
      docker push $CS_IMAGE
